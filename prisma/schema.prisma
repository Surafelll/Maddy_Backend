// datasource and generator configuration
datasource db {
    provider = "mysql" // Specify MySQL as the database provider
    url      = env("DATABASE_URL") // Fetch connection details from .env file
}

generator client {
    provider = "prisma-client-js" // Generate JavaScript/TypeScript Prisma client
}

// Product model
model Product {
    id          Int       @id @default(autoincrement()) // Unique ID for each product
    name        String // Name of the product
    description String // Description of the product
    price       Float // Price of the product
    quantity    Int // Quantity available in stock
    imageUrl    String? // Optional: URL or path to the product image
    expiryDate  DateTime? // Optional: Expiry date for perishable products
    categoryId  Int // Foreign key to Category
    createdAt   DateTime  @default(now()) // Timestamp when the product is created
    updatedAt   DateTime  @updatedAt // Timestamp when the product is updated

    // Relations
    category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade) // The category of the product
    transactions Transaction[] // All transactions (sales) associated with the product
}

// Category model
model Category {
    id          Int     @id @default(autoincrement()) // Unique ID for each category
    name        String // Name of the category
    type        String // Type of the category (e.g., Electronics, Groceries)
    description String? // Optional: Description of the category

    // Relations
    products Product[] // All products belonging to this category
}

// Transaction model
model Transaction {
    id          Int      @id @default(autoincrement()) // Unique ID for each transaction
    productId   Int? // Nullable foreign key to Product (for retaining transaction after product deletion)
    quantity    Int // Quantity of the product sold
    totalAmount Float // Total price for the sold quantity
    soldAt      DateTime @default(now()) // Date of the transaction

    // Relations
    product Product? @relation(fields: [productId], references: [id], onDelete: SetNull) // Link to Product sold
}

// Report model
model Report {
    id         Int      @id @default(autoincrement()) // Unique ID for each report
    startDate  DateTime // Start date for the report period
    endDate    DateTime // End date for the report period
    totalSales Float // Total sales during the report period
    createdAt  DateTime @default(now()) // Timestamp when the report is generated
}
